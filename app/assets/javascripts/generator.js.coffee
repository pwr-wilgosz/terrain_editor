Settings = {}
init_settings = ->
  Settings =
    cvs: document.createElement('canvas')
    ang: Math.random() * Math.PI
    centerPt:
      x: 0
      y: 0
    wrapper: $("#map-wrapper")
    stop: false
    points: []
    edges: []
  Settings.context = Settings.cvs.getContext('2d')

cvs = ->
  Settings.cvs

context = ->
  Settings.context

centerPt =  ->
  Settings.centerPt

ang = ->
  Settings.ang

init = ->
  init_settings()
  unless stop_for_other_screen()
    # add Settings.points
    map_id = Settings.wrapper.data("id")
    $.ajax
      url: "/maps/#{map_id}"
      dataType: "json"
    .success (map) ->
      Settings.points = map.points
      Settings.edges = map.edges
      update()
      Settings.wrapper.find(".content").append cvs()
      resizeHandler()
      window.onresize = resizeHandler
  toggle_play()

toggle_play = ->
  $(".play-btn").on "click", ->
    $(this).find("i").toggleClass("fa-play").toggleClass("fa-pause")
    if Settings.stop
      start()
      update()
    else
      stop()

stop_for_other_screen = ->
  if Settings.wrapper.length == 0
    Settings.stop = true
    return true
  else
    return false

stop = ->
  Settings.stop = true
  return true

start = ->
  Settings.stop = false
  return true


update = ->
  # clear canvas
  context().clearRect 0, 0, cvs().width, cvs().height
  drawObject ang(), cvs().height / 500
  #drawObject(ang2, 250);
  # rotate
  Settings.ang += 0.0025
  if !Settings.stop
    window.requestAnimationFrame update

drawObject = (_ang, size) ->
  n = Settings.points.length
  _context = context()
  # create a matrix with current rotation
  mat = createRotateMatrix(_ang)
  # position Settings.points
  while n--
    pt = Settings.points[n]
    new_pt = pt_x_matrix(pt, mat)
    pt._x = centerPt().x + new_pt.x * size
    pt._y = centerPt().y - (new_pt.y * size)
  n = Settings.edges.length
  while n--
    ln = Settings.edges[n]
    drawLine _context, Settings.points[ln[0]], Settings.points[ln[1]]
  n = Settings.points.length
  while n--
    pt = Settings.points[n]
    drawPoint _context, pt
  return

drawPoint = (_context, pt) ->
  _context.fillStyle = '#c4e1ee'
  _context.fillRect pt._x - 2, pt._y - 2, 4, 4
  return

drawLine = (_context, ptA, ptB) ->
  _context.beginPath()
  _context.moveTo ptA._x, ptA._y
  _context.lineTo ptB._x, ptB._y
  _context.lineWidth = 1
  _context.strokeStyle = '#3e7690'
  _context.stroke()
  _context.closePath()
  return

pt_x_matrix = (pt, matrix) ->
  x: pt.x * matrix[0] + pt.z * matrix[1]
  y: pt.y

createRotateMatrix = (_ang) ->
  [ Math.cos(_ang), Math.sin(_ang) ]

resizeHandler = ->
  box = cvs().getBoundingClientRect()
  w = box.width
  h = box.height
  cvs().width = w
  cvs().height = h
  centerPt().x = Math.round(w / 2)
  centerPt().y = Math.round(h * 0.47)
  return

@Generator = { init, init_settings, stop}
# ---
# generated by js2coffee 2.0.4
